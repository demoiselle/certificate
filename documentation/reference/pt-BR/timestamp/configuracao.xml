<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="timestamp-configuracao">

    <title>Configuração do Demoiselle Timestamp</title>

    <section>
        <title>Instalação do componente</title>
        <para>
            Para instalar o componente <emphasis>Demoiselle Timestamp</emphasis>
            na aplicação, basta adicionar a sua dependência no arquivo <filename>pom.xml</filename>
            do projeto gerenciado pelo Maven:
        </para>
        <programlisting role="XML"><![CDATA[<dependency>
    <groupId>br.gov.frameworkdemoiselle.component</groupId>
    <artifactId>demoiselle-certificate-timestamp</artifactId>
    <version>2.0.0</version>
</dependency>]]>
        </programlisting>
    </section>

    <section>
        <title>Implementando uma solução customizada de carimbo de tempo</title>
        <para>
            Este componente fornece uma implementação de referência para acesso ao servidor de carimbo de tempo do SERPRO, mas podem ocorrer casos em que é necessário que
            o acesso seja feito a outro servidor, ou mesmo o modo de acesso precisa ser alterado, como por exemplo utilizando REST ou HTTP.
        </para>

        <para>
            Para criar esta implementação customizada, devemos criar uma classe e implementar a interface <code>TimeStampGenerator</code>, localizada no pacote
            <code>br.gov.frameworkdemoiselle.certificate.timestamp.TimeStampGenerator</code>. Esta interface faz parte do componente <emphasis>Demoiselle Core</emphasis>.
            Para saber como adicionar o componente ao seu projeto, consulte <xref linkend="core-configuracao" />.
        </para>

        <para>
            Abaixo temos a implementação padrão do componente de carimbo de tempo que utiliza esta interface. A classe é composta essencialmente de 3 métodos, a saber:

            <itemizedlist>
                <listitem>
                    <code>initialize(byte[] content, PrivateKey privateKey, Certificate[] certificates)</code>, que deve ser utilizado para efetuar a parametrização inicial
                    para obtenção do carimbo de tempo. Ele recebe como parâmetros <code>content</code>, que é conteúdo original do arquivo que está sendo carimbado; <code>privateKey</code>,
                    que é a chave privada a ser utilizada para assinar a requisição, caso necessário; e <code>certificate</code>, que é a cadeia de certificados correspondente à
                    chave privada utilizada na assinatura da requisição.
                </listitem>
                <listitem>
                    <code>byte[] generateTimeStamp()</code>, que obtém um carimbo de tempo do servidor e retorna a estrutura em bytes para ser utilizada.
                </listitem>
                <listitem>
                    <code>void validateTimeStamp(byte[] content, byte[] response)</code>, que efetua a validação de um carimbo de tempo. Ele recebe como parâmetros
                    <code>content</code> e <code>response</code> que são, respectivamente, o conteúdo original e o próprio carimbo de tempo obtido anteriormente.
                </listitem>
            </itemizedlist>
        </para>

        <programlisting role="JAVA"><![CDATA[package br.gov.frameworkdemoiselle.timestamp;

import br.gov.frameworkdemoiselle.certificate.exception.CertificateCoreException;
import br.gov.frameworkdemoiselle.certificate.timestamp.TimeStampGenerator;
import br.gov.frameworkdemoiselle.timestamp.connector.TimeStampOperator;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TimestampGeneratorImpl implements TimeStampGenerator {

    private static final Logger logger = LoggerFactory.getLogger(TimestampGeneratorImpl.class);

    private byte[] content;
    private PrivateKey privateKey;
    private Certificate[] certificates;

    /**
     * Inicializa os atributos necessarios para obter o carimbo de tempo
     *
     * @param content
     * @param privateKey
     * @param certificates
     * @throws CertificateCoreException
     */
    @Override
    public void initialize(byte[] content, PrivateKey privateKey, Certificate[] certificates) throws CertificateCoreException {
        this.content = content;
        this.privateKey = privateKey;
        this.certificates = certificates;
    }

    /**
     * Envia a requisicao de carimbo de tempo para um servidor de carimbo de
     * tempo
     *
     * @return O carimbo de tempo retornado pelo servidor
     */
    @Override
    public byte[] generateTimeStamp() throws CertificateCoreException {
        TimeStampOperator timeStampOperator = new TimeStampOperator();
        byte[] request = timeStampOperator.createRequest(privateKey, certificates, content);
        return timeStampOperator.invoke(request);
    }

    /**
     * Valida um carimnbo de tempo e o documento original
     *
     * @param content o conteudo original
     * @param response O carimbo de tempo a ser validado
     *
     */
    @Override
    public void validateTimeStamp(byte[] content, byte[] response) throws CertificateCoreException {
        TimeStampOperator timeStampOperator = new TimeStampOperator();
        timeStampOperator.validate(content, response);
    }
}]]></programlisting>

        <para>
            A classe <code>br.gov.frameworkdemoiselle.timestamp.connector.TimeStampOperator</code> já possui a implementação necessária para acesso ao carimbo de tempo, facilitando
            assim a customização do componente.
        </para>

        <para>
            Ao criar a sua implementação, voce deve usar a anotação <code>@Priority</code>, que recebe como parâmetro um número inteiro que serve para definir a prioridade de execução da respectiva 
			implementação. O artefato deve ser empacotado de modo a ser utilizado em conjunto com o componente <emphasis>Demoiselle Signer</emphasis>.
        </para>
	
        <para>
            Como o componente usa SPI, o seu projeto com sua implementação deve ter um diretório <emphasis>src/main/resource</emphasis> com a pasta <emphasis>META-INF/services</emphasis>. E dentro dela
            um arquivo chamado "br.gov.frameworkdemoiselle.certificate.timestamp.TimeStampGenerator"

            No arquivo adicione o caminho completo da sua classe.

            <itemizedlist>
                <listitem>
                    <code>seupacote.suaclasse</code>
                </listitem>
            </itemizedlist>

            Após estas alterações, o componente <emphasis>Demoiselle Signer</emphasis> utilizará a sua implementação customizada.

        </para>
    </section>
</chapter>
